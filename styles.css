* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Utility classes */
.wrapper {
    --_wrapper-max-width: 60rem;
    --_wrapper-padding: 1rem;

    width: min(100% - 2 * var(--_wrapper-padding), var(--_wrapper-max-width));
    margin-inline: auto;
}

.flow > * + * {
    margin-top: 1rem;
}

.grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    padding-block: 1rem;
    border: 6px dotted grey;

    container-type: inline-size;

    @container (width >= calc(100px * 2 + 1rem)) {
        > div {
            grid-column-end: span 2; /* Visually there will be one column */
        }
    }

    /* When visually there are 2 columns */
    @container (calc(100px * 4 + 3rem) < width < calc(100px * 6 + 5rem)) {
        > div:last-child:nth-child(odd) {
            grid-column-start: 2;
        }
    }

    /* When visually there are 3 columns */
    @container (calc(100px * 6 + 5rem) < width < calc(100px * 8 + 7rem)) {
        > div:nth-child(3n + 4):last-child {
            grid-column-start: 3;
        }

        &:has(> div:nth-child(3n + 5):last-child) > :nth-last-child(2) {
            grid-column-start: 2;
        }
    }

    /* When visually there are 4 columns */
    @container (calc(100px * 8 + 7rem) < width < calc(100px * 10 + 9rem)) {
        > div:nth-child(4n + 5):last-child {
            grid-column-start: 4;
        }

        &:has(:nth-child(4n + 6):last-child) > :nth-last-child(2) {
            grid-column-start: 3;
        }

        &:has(:nth-child(4n + 7):last-child) > :nth-last-child(3) {
            grid-column-start: 2;
        }
    }

    > div {
        background-color: hsl(350, 88%, 48%);
        min-height: 25vh;
        min-height: 25dvh;
        border-radius: 0.25rem;
    }
}
